# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
# 
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
# 
# The Original Code is Komodo code.
# 
# The Initial Developer of the Original Code is ActiveState Software Inc.
# Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
# ActiveState Software Inc. All Rights Reserved.
# 
# Contributor(s):
#   ActiveState Software Inc
# 
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
# 
# ***** END LICENSE BLOCK *****

# Komodo Mason language service.
#
# Generated by 'luddite.py' on Thu Jul  5 12:35:21 2007.
#

import logging
from koXMLLanguageBase import koHTMLLanguageBase


import scimozindent

log = logging.getLogger("koMasonLanguage")
# log.setLevel(logging.DEBUG)


def registerLanguage(registry):
    log.debug("Registering language Mason")
    registry.registerLanguage(KoMasonLanguage())


class KoMasonLanguage(koHTMLLanguageBase):
    name = "Mason"
    lexresLangName = "Mason"
    _reg_desc_ = "%s Language" % name
    _reg_contractid_ = "@activestate.com/koLanguage?language=%s;1" % name
    _reg_clsid_ = "{5e69ecf0-525e-11db-82d8-000d935d3368}"
    defaultExtension = '.mason.html'
    searchURL = "http://masonhq.com"

    lang_from_udl_family = {'CSL': 'JavaScript', 'TPL': 'Mason', 'M': 'HTML', 'CSS': 'CSS', 'SSL': 'Perl'}

    def __init__(self):
        koHTMLLanguageBase.__init__(self)
        self.matchingSoftChars[" "] = ("%", self.softchar_accept_bracket_percent_space)

    def softchar_accept_bracket_percent_space(self, scimoz, pos, style_info, candidate):
        """Look for |<%_, where these three chars are styled to indicate
        a start-perl tag, and if we find them provide the closing part.
        """
        return self.softchar_accept_styled_chars(
            scimoz, pos, style_info, candidate,
            {'curr_style' : scimoz.SCE_UDL_TPL_DEFAULT,
             'styled_chars' : [
                    (scimoz.SCE_UDL_TPL_OPERATOR, ord("%")),
                    (scimoz.SCE_UDL_TPL_OPERATOR, ord("<"))
                ]
            })

    def computeIndent(self, scimoz, indentStyle, continueComments):
        return self._computeIndent(scimoz, indentStyle, continueComments, self._style_info)

    def _computeIndent(self, scimoz, indentStyle, continueComments, style_info):
	res = self._doIndentHere(scimoz, indentStyle, continueComments, style_info)
	if res is None:
	    return koHTMLLanguageBase._computeIndent(self, scimoz, indentStyle, continueComments, self._style_info)
	return res

    def _keyPressed(self, ch, scimoz, style_info):
	res = self._doKeyPressHere(ch, scimoz, style_info)
	if res is None:
	    return koHTMLLanguageBase._keyPressed(self, ch, scimoz, style_info)
	return res

    _startWords = "init perl args".split(" ")
    def _doIndentHere(self, scimoz, indentStyle, continueComments, style_info):
	# Returns either None or an indent string
	pos = scimoz.positionBefore(scimoz.currentPos)
	startPos = scimoz.currentPos
	style = scimoz.getStyleAt(pos)
	if style != scimoz.SCE_UDL_TPL_OPERATOR:
	    return None
	if scimoz.getWCharAt(pos) != ">":
	    return None
	pos -= 1
	curLineNo = scimoz.lineFromPosition(pos)
	lineStartPos = scimoz.positionFromLine(curLineNo)
        delta, numTags = self._getTagDiffDelta(scimoz, lineStartPos, startPos)
        if delta < 0 and numTags == 1 and curLineNo > 0:
            didDedent, dedentAmt = self.dedentThisLine(scimoz, curLineNo, startPos)
            if didDedent:
                return dedentAmt
            else:
                # Since Mason tags end with a ">", keep the
                # HTML auto-indenter out of here.
                return self._getRawIndentForLine(scimoz, curLineNo)
	indentWidth = self._getIndentWidthForLine(scimoz, curLineNo)
	indent = scimoz.indent
	newIndentWidth = indentWidth + delta * indent
	if newIndentWidth < 0:
	    newIndentWidth = 0
	return scimozindent.makeIndentFromWidth(scimoz, newIndentWidth)

    def _getTagDiffDelta(self, scimoz, lineStartPos, startPos):
	data = scimoz.getStyledText(lineStartPos, startPos)
	chars = data[0::2]
	styles = [ord(x) for x in data[1::2]]
	lim = len(styles)
	delta = 0
        numTags = 0
	i = 0
	limSub1 = lim - 1
	sawSlash = False
	while i < limSub1:
	    if styles[i] == scimoz.SCE_UDL_TPL_OPERATOR and chars[i] == '<':
		i += 1
		if styles[i] == scimoz.SCE_UDL_TPL_OPERATOR:
		    if chars[i] == '/':
			sawSlash = True
			i += 1
		if styles[i] != scimoz.SCE_UDL_TPL_OPERATOR or chars[i] != '%':
		    i += 1
		    continue
		i += 1
		while (i < lim
		       and styles[i] == scimoz.SCE_UDL_TPL_DEFAULT):
		    i += 1
		if styles[i] != scimoz.SCE_UDL_TPL_WORD:
		    return None
		wordStart = i
		while (i < lim
		       and styles[i] == scimoz.SCE_UDL_TPL_WORD):
		    i += 1
		word = chars[wordStart:i]
		if word in self._startWords:
                    numTags += 1
		    if sawSlash:
			delta -= 1
		    else:
			delta += 1
	    else:
		i += 1
        return delta, numTags

    def _doKeyPressHere(self, ch, scimoz, style_info):
	# Returns either None or an indent string
	pos = scimoz.positionBefore(scimoz.currentPos)
	startPos = scimoz.currentPos
	style = scimoz.getStyleAt(pos)
	if style != scimoz.SCE_UDL_TPL_OPERATOR:
	    return None
	if scimoz.getWCharAt(pos) != ">":
	    return None
	pos -= 1
	curLineNo = scimoz.lineFromPosition(pos)
	lineStartPos = scimoz.positionFromLine(curLineNo)
        delta, numTags = self._getTagDiffDelta(scimoz, lineStartPos, startPos)
        if delta < 0 and numTags == 1 and curLineNo > 0:
            didDedent, dedentAmt = self.dedentThisLine(scimoz, curLineNo, startPos)
            if didDedent:
                return dedentAmt
        # Assume the tag's indent level is fine, so don't let the
        # HTML auto-indenter botch things up.
        return self._getRawIndentForLine(scimoz, curLineNo)
