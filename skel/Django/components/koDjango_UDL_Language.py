# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
# 
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
# 
# The Original Code is Komodo code.
# 
# The Initial Developer of the Original Code is ActiveState Software Inc.
# Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
# ActiveState Software Inc. All Rights Reserved.
# 
# Contributor(s):
#   ActiveState Software Inc
# 
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
# 
# ***** END LICENSE BLOCK *****

# Komodo Django language service.
#
# Generated by 'luddite.py' on Fri Oct 20 08:49:16 2006.
# Then put into skel/ on Fri Jul  6 14:28:38 PDT 2007

import logging
from xpcom import components
from koXMLLanguageBase import koHTMLLanguageBase

import scimozindent

log = logging.getLogger("koDjangoLanguage")
# log.setLevel(logging.DEBUG)

def registerLanguage(registry):
    log.debug("Registering language Django")
    registry.registerLanguage(KoDjangoLanguage())


class KoDjangoLanguage(koHTMLLanguageBase):
    name = "Django"
    lexresLangName = "Django"
    _reg_desc_ = "%s Language" % name
    _reg_contractid_ = "@activestate.com/koLanguage?language=%s;1" % name
    _reg_clsid_ = "{5c36e354-525e-11db-82d8-000d935d3368}"
    defaultExtension = '.django.html'
    searchURL = "http://docs.djangoproject.com/en"

    lang_from_udl_family = {'CSL': 'JavaScript', 'TPL': 'Django', 'M': 'HTML', 'CSS': 'CSS'}

    def __init__(self):
        koHTMLLanguageBase.__init__(self)
        self.matchingSoftChars["%"] = ("%", self.accept_matching_percent)
        self._style_info.update(
            _indent_styles = [components.interfaces.ISciMoz.SCE_UDL_TPL_OPERATOR]
            )
        self._indent_chars = u'{}'
        self._indent_open_chars = u'{'
        self._indent_close_chars = u'}'

    def accept_matching_percent(self, scimoz, pos, style_info, candidate):
        return self.softchar_accept_styled_chars(
            scimoz, pos, style_info, candidate,
            {'styled_chars' : [
                    (scimoz.SCE_UDL_TPL_OPERATOR, ord("{"))
                ]
            })

    def computeIndent(self, scimoz, indentStyle, continueComments):
        return self._computeIndent(scimoz, indentStyle, continueComments, self._style_info)

    def _computeIndent(self, scimoz, indentStyle, continueComments, style_info):
	res = self._doIndentHere(scimoz, indentStyle, continueComments, style_info)
	if res is None:
	    return koHTMLLanguageBase._computeIndent(self, scimoz, indentStyle, continueComments, self._style_info)
	return res

    _startWords = "else if ifchanged ifequal ifnotequal block filter for with spaceless"
    def _doIndentHere(self, scimoz, indentStyle, continueComments, style_info):
	#
	# Returns either None or an indent string
	pos = scimoz.positionBefore(scimoz.currentPos)
	startPos = scimoz.currentPos
	style = scimoz.getStyleAt(pos)
	if style != scimoz.SCE_UDL_TPL_OPERATOR:
	    return None
	if scimoz.getWCharAt(pos) != "}":
	    return None
	pos -= 1
	style = scimoz.getStyleAt(pos)
	if style != scimoz.SCE_UDL_TPL_OPERATOR:
	    return None
	if scimoz.getWCharAt(pos) != "%":
	    return None
	curLineNo = scimoz.lineFromPosition(pos)
	lineStartPos = scimoz.positionFromLine(curLineNo)
	data = scimoz.getStyledText(lineStartPos, startPos)
	chars = data[0::2]
	styles = [ord(x) for x in data[1::2]]
	lim = len(styles)
	delta = 0
	i = 0
	limSub1 = lim - 1
	while i < limSub1:
	    if (styles[i] == scimoz.SCE_UDL_TPL_OPERATOR
		and styles[i + 1] == scimoz.SCE_UDL_TPL_OPERATOR
		and chars[i] == '{'
		and chars[i + 1] == "%"):
		j = i + 2
		while (j < lim
		       and styles[j] == scimoz.SCE_UDL_TPL_DEFAULT):
		    j += 1
		if styles[j] != scimoz.SCE_UDL_TPL_WORD:
		    return None
		wordStart = j
		while (j < lim
		       and styles[j] == scimoz.SCE_UDL_TPL_WORD):
		    j += 1
		word = chars[wordStart:j]
		if word.startswith('end'):
		    delta -= 1
		elif word in self._startWords:
		    delta += 1
		i = j
	    else:
		i += 1
	indentWidth = self._getIndentWidthForLine(scimoz, curLineNo)
	indent = scimoz.indent
	newIndentWidth = indentWidth + delta * indent
	if newIndentWidth < 0:
	    newIndentWidth = 0
	return scimozindent.makeIndentFromWidth(scimoz, newIndentWidth)

	
